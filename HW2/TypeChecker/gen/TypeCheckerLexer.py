# Generated from E:/IUST/TA/Compiler-14031/antlr_projects/2-TypeChecker/TypeChecker.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,101,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,8,1,8,1,9,4,9,49,8,9,11,9,12,9,50,1,10,4,10,54,8,10,11,
        10,12,10,55,1,10,1,10,5,10,60,8,10,10,10,12,10,63,9,10,1,10,5,10,
        66,8,10,10,10,12,10,69,9,10,1,10,1,10,4,10,73,8,10,11,10,12,10,74,
        3,10,77,8,10,1,11,1,11,5,11,81,8,11,10,11,12,11,84,9,11,1,11,1,11,
        1,12,1,12,5,12,90,8,12,10,12,12,12,93,9,12,1,13,4,13,96,8,13,11,
        13,12,13,97,1,13,1,13,1,82,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,0,19,9,21,10,23,11,25,12,27,13,1,0,4,1,0,48,57,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,108,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,31,1,0,0,0,5,33,
        1,0,0,0,7,35,1,0,0,0,9,37,1,0,0,0,11,39,1,0,0,0,13,41,1,0,0,0,15,
        43,1,0,0,0,17,45,1,0,0,0,19,48,1,0,0,0,21,76,1,0,0,0,23,78,1,0,0,
        0,25,87,1,0,0,0,27,95,1,0,0,0,29,30,5,59,0,0,30,2,1,0,0,0,31,32,
        5,43,0,0,32,4,1,0,0,0,33,34,5,45,0,0,34,6,1,0,0,0,35,36,5,42,0,0,
        36,8,1,0,0,0,37,38,5,47,0,0,38,10,1,0,0,0,39,40,5,61,0,0,40,12,1,
        0,0,0,41,42,5,40,0,0,42,14,1,0,0,0,43,44,5,41,0,0,44,16,1,0,0,0,
        45,46,7,0,0,0,46,18,1,0,0,0,47,49,3,17,8,0,48,47,1,0,0,0,49,50,1,
        0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,20,1,0,0,0,52,54,3,17,8,0,53,
        52,1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,57,1,0,0,
        0,57,61,5,46,0,0,58,60,3,17,8,0,59,58,1,0,0,0,60,63,1,0,0,0,61,59,
        1,0,0,0,61,62,1,0,0,0,62,77,1,0,0,0,63,61,1,0,0,0,64,66,3,17,8,0,
        65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,70,1,
        0,0,0,69,67,1,0,0,0,70,72,5,46,0,0,71,73,3,17,8,0,72,71,1,0,0,0,
        73,74,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,53,1,
        0,0,0,76,67,1,0,0,0,77,22,1,0,0,0,78,82,5,34,0,0,79,81,9,0,0,0,80,
        79,1,0,0,0,81,84,1,0,0,0,82,83,1,0,0,0,82,80,1,0,0,0,83,85,1,0,0,
        0,84,82,1,0,0,0,85,86,5,34,0,0,86,24,1,0,0,0,87,91,7,1,0,0,88,90,
        7,2,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,
        92,26,1,0,0,0,93,91,1,0,0,0,94,96,7,3,0,0,95,94,1,0,0,0,96,97,1,
        0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,100,6,13,0,0,
        100,28,1,0,0,0,10,0,50,55,61,67,74,76,82,91,97,1,6,0,0
    ]

class TypeCheckerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    PLUS = 2
    MINUS = 3
    MUL = 4
    DIV = 5
    ASSIGN = 6
    LPAREN = 7
    RPAREN = 8
    INTEGER = 9
    FLOAT = 10
    STRING = 11
    ID = 12
    WS = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'+'", "'-'", "'*'", "'/'", "'='", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "PLUS", "MINUS", "MUL", "DIV", "ASSIGN", "LPAREN", "RPAREN", 
            "INTEGER", "FLOAT", "STRING", "ID", "WS" ]

    ruleNames = [ "T__0", "PLUS", "MINUS", "MUL", "DIV", "ASSIGN", "LPAREN", 
                  "RPAREN", "DIGIT", "INTEGER", "FLOAT", "STRING", "ID", 
                  "WS" ]

    grammarFileName = "TypeChecker.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


