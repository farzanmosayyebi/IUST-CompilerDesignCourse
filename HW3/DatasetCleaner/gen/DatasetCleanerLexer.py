# Generated from D:/Elmos/S4031/CompilerDesign/TA1/TA1/HW3/Grammar/DatasetCleaner.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,156,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        3,12,117,8,12,1,13,4,13,120,8,13,11,13,12,13,121,1,13,1,13,4,13,
        126,8,13,11,13,12,13,127,3,13,130,8,13,1,14,1,14,1,15,1,15,4,15,
        136,8,15,11,15,12,15,137,1,16,1,16,1,17,4,17,143,8,17,11,17,12,17,
        144,1,17,1,17,1,18,1,18,1,18,1,18,3,18,153,8,18,1,18,1,18,0,0,19,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,0,31,15,33,16,35,17,37,18,1,0,5,2,0,60,60,62,62,1,0,48,
        57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,9,13,
        13,32,32,165,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,41,
        1,0,0,0,5,43,1,0,0,0,7,49,1,0,0,0,9,56,1,0,0,0,11,67,1,0,0,0,13,
        72,1,0,0,0,15,80,1,0,0,0,17,85,1,0,0,0,19,90,1,0,0,0,21,97,1,0,0,
        0,23,104,1,0,0,0,25,116,1,0,0,0,27,119,1,0,0,0,29,131,1,0,0,0,31,
        133,1,0,0,0,33,139,1,0,0,0,35,142,1,0,0,0,37,152,1,0,0,0,39,40,5,
        44,0,0,40,2,1,0,0,0,41,42,5,46,0,0,42,4,1,0,0,0,43,44,5,67,0,0,44,
        45,5,76,0,0,45,46,5,69,0,0,46,47,5,65,0,0,47,48,5,78,0,0,48,6,1,
        0,0,0,49,50,5,82,0,0,50,51,5,69,0,0,51,52,5,77,0,0,52,53,5,79,0,
        0,53,54,5,86,0,0,54,55,5,69,0,0,55,8,1,0,0,0,56,57,5,68,0,0,57,58,
        5,85,0,0,58,59,5,80,0,0,59,60,5,76,0,0,60,61,5,73,0,0,61,62,5,67,
        0,0,62,63,5,65,0,0,63,64,5,84,0,0,64,65,5,69,0,0,65,66,5,83,0,0,
        66,10,1,0,0,0,67,68,5,68,0,0,68,69,5,82,0,0,69,70,5,79,0,0,70,71,
        5,80,0,0,71,12,1,0,0,0,72,73,5,77,0,0,73,74,5,73,0,0,74,75,5,83,
        0,0,75,76,5,83,0,0,76,77,5,73,0,0,77,78,5,78,0,0,78,79,5,71,0,0,
        79,14,1,0,0,0,80,81,5,70,0,0,81,82,5,73,0,0,82,83,5,76,0,0,83,84,
        5,76,0,0,84,16,1,0,0,0,85,86,5,87,0,0,86,87,5,73,0,0,87,88,5,84,
        0,0,88,89,5,72,0,0,89,18,1,0,0,0,90,91,5,70,0,0,91,92,5,73,0,0,92,
        93,5,76,0,0,93,94,5,84,0,0,94,95,5,69,0,0,95,96,5,82,0,0,96,20,1,
        0,0,0,97,98,5,82,0,0,98,99,5,69,0,0,99,100,5,78,0,0,100,101,5,65,
        0,0,101,102,5,77,0,0,102,103,5,69,0,0,103,22,1,0,0,0,104,105,5,84,
        0,0,105,106,5,79,0,0,106,24,1,0,0,0,107,108,5,61,0,0,108,117,5,61,
        0,0,109,110,5,33,0,0,110,117,5,61,0,0,111,117,7,0,0,0,112,113,5,
        60,0,0,113,117,5,61,0,0,114,115,5,62,0,0,115,117,5,61,0,0,116,107,
        1,0,0,0,116,109,1,0,0,0,116,111,1,0,0,0,116,112,1,0,0,0,116,114,
        1,0,0,0,117,26,1,0,0,0,118,120,7,1,0,0,119,118,1,0,0,0,120,121,1,
        0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,129,1,0,0,0,123,125,5,
        46,0,0,124,126,7,1,0,0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,1,
        0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,123,1,0,0,0,129,130,1,
        0,0,0,130,28,1,0,0,0,131,132,5,92,0,0,132,30,1,0,0,0,133,135,7,2,
        0,0,134,136,7,3,0,0,135,134,1,0,0,0,136,137,1,0,0,0,137,135,1,0,
        0,0,137,138,1,0,0,0,138,32,1,0,0,0,139,140,5,34,0,0,140,34,1,0,0,
        0,141,143,7,4,0,0,142,141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,
        0,144,145,1,0,0,0,145,146,1,0,0,0,146,147,6,17,0,0,147,36,1,0,0,
        0,148,153,5,10,0,0,149,150,5,13,0,0,150,153,5,10,0,0,151,153,5,13,
        0,0,152,148,1,0,0,0,152,149,1,0,0,0,152,151,1,0,0,0,153,154,1,0,
        0,0,154,155,6,18,0,0,155,38,1,0,0,0,8,0,116,121,127,129,137,144,
        152,1,6,0,0
    ]

class DatasetCleanerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    CLEAN = 3
    REMOVE = 4
    DUPLICATES = 5
    DROP = 6
    MISSING = 7
    FILL = 8
    WITH = 9
    FILTER = 10
    RENAME = 11
    TO = 12
    COMPARISON_OPERATOR = 13
    NUMBER = 14
    STRING = 15
    QUOTE = 16
    WS = 17
    NEWLINE = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'.'", "'CLEAN'", "'REMOVE'", "'DUPLICATES'", "'DROP'", 
            "'MISSING'", "'FILL'", "'WITH'", "'FILTER'", "'RENAME'", "'TO'", 
            "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "CLEAN", "REMOVE", "DUPLICATES", "DROP", "MISSING", "FILL", 
            "WITH", "FILTER", "RENAME", "TO", "COMPARISON_OPERATOR", "NUMBER", 
            "STRING", "QUOTE", "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "CLEAN", "REMOVE", "DUPLICATES", "DROP", 
                  "MISSING", "FILL", "WITH", "FILTER", "RENAME", "TO", "COMPARISON_OPERATOR", 
                  "NUMBER", "ESC", "STRING", "QUOTE", "WS", "NEWLINE" ]

    grammarFileName = "DatasetCleaner.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


